{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../services/user.service\";\nimport * as i3 from \"../../services/toast.service\";\nimport * as i4 from \"@angular/common\";\nfunction AuthModalComponent_div_11_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Username is required.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AuthModalComponent_div_11_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Username must be at least 3 characters long.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AuthModalComponent_div_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 15);\n    i0.ɵɵtemplate(1, AuthModalComponent_div_11_div_1_Template, 2, 0, \"div\", 16);\n    i0.ɵɵtemplate(2, AuthModalComponent_div_11_div_2_Template, 2, 0, \"div\", 16);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    let tmp_0_0;\n    let tmp_1_0;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_0_0 = ctx_r0.authForm.get(\"username\")) == null ? null : tmp_0_0.hasError(\"required\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_1_0 = ctx_r0.authForm.get(\"username\")) == null ? null : tmp_1_0.hasError(\"minlength\"));\n  }\n}\nfunction AuthModalComponent_div_16_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Password is required.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AuthModalComponent_div_16_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Password must be at least 6 characters long.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AuthModalComponent_div_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 15);\n    i0.ɵɵtemplate(1, AuthModalComponent_div_16_div_1_Template, 2, 0, \"div\", 16);\n    i0.ɵɵtemplate(2, AuthModalComponent_div_16_div_2_Template, 2, 0, \"div\", 16);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    let tmp_0_0;\n    let tmp_1_0;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_0_0 = ctx_r1.authForm.get(\"password\")) == null ? null : tmp_0_0.hasError(\"required\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_1_0 = ctx_r1.authForm.get(\"password\")) == null ? null : tmp_1_0.hasError(\"minlength\"));\n  }\n}\nfunction AuthModalComponent_div_17_div_4_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Email is required.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AuthModalComponent_div_17_div_4_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Email must be a valid email address.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AuthModalComponent_div_17_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 15);\n    i0.ɵɵtemplate(1, AuthModalComponent_div_17_div_4_div_1_Template, 2, 0, \"div\", 16);\n    i0.ɵɵtemplate(2, AuthModalComponent_div_17_div_4_div_2_Template, 2, 0, \"div\", 16);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext(2);\n    let tmp_0_0;\n    let tmp_1_0;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_0_0 = ctx_r7.authForm.get(\"email\")) == null ? null : tmp_0_0.hasError(\"required\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_1_0 = ctx_r7.authForm.get(\"email\")) == null ? null : tmp_1_0.hasError(\"email\"));\n  }\n}\nconst _c0 = function (a0) {\n  return {\n    \"mb-6\": a0\n  };\n};\nfunction AuthModalComponent_div_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 5)(1, \"label\", 17);\n    i0.ɵɵtext(2, \"Email\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"input\", 18);\n    i0.ɵɵtemplate(4, AuthModalComponent_div_17_div_4_Template, 3, 2, \"div\", 8);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    let tmp_1_0;\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(2, _c0, ctx_r2.hasErrors(\"email\")));\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngIf\", ((tmp_1_0 = ctx_r2.authForm.get(\"email\")) == null ? null : tmp_1_0.invalid) && ((tmp_1_0 = ctx_r2.authForm.get(\"email\")) == null ? null : tmp_1_0.touched));\n  }\n}\nexport class AuthModalComponent {\n  constructor(fb, userService, toastService) {\n    this.fb = fb;\n    this.userService = userService;\n    this.toastService = toastService;\n    this.close = new EventEmitter();\n    this.isRegisterMode = false;\n    this.isProfileMode = false;\n    this.authForm = this.fb.group({\n      username: ['', [Validators.required, Validators.minLength(3)]],\n      password: ['', [Validators.required, Validators.minLength(6)]],\n      email: [''] // Only required during registration or profile update\n    });\n    // Directly assign the observable\n    this.currentUser$ = this.userService.currentUser$;\n  }\n  ngOnInit() {\n    this.currentUser$.subscribe(user => this.initializeFormForUser(user));\n  }\n  initializeFormForUser(user) {\n    if (user) {\n      this.isProfileMode = true;\n      this.authForm.patchValue(user);\n    } else {\n      this.isProfileMode = false;\n      this.authForm.reset();\n    }\n  }\n  handleEscape(event) {\n    this.closeModal();\n  }\n  toggleMode() {\n    this.isRegisterMode = !this.isRegisterMode;\n    this.isProfileMode = false;\n    this.updateEmailValidators();\n    this.resetForm();\n  }\n  updateEmailValidators() {\n    if (this.isRegisterMode) {\n      this.authForm.get('email')?.setValidators([Validators.required, Validators.email]);\n    } else {\n      this.authForm.get('email')?.clearValidators();\n    }\n    this.authForm.get('email')?.updateValueAndValidity();\n  }\n  resetForm() {\n    this.authForm.reset();\n    Object.keys(this.authForm.controls).forEach(control => {\n      this.authForm.get(control)?.markAsUntouched();\n    });\n  }\n  onSubmit() {\n    if (this.authForm.invalid) {\n      this.authForm.markAllAsTouched();\n      return;\n    }\n    if (this.isProfileMode) {\n      this.updateProfile();\n    } else if (this.isRegisterMode) {\n      this.registerUser();\n    } else {\n      this.loginUser();\n    }\n    this.authForm.reset();\n    this.closeModal();\n  }\n  updateProfile() {\n    this.currentUser$.subscribe(user => {\n      if (user) {\n        const updatedUser = {\n          ...user,\n          ...this.authForm.value\n        };\n        this.userService.updateUser(updatedUser.id, updatedUser);\n        this.toastService.showToast({\n          message: 'Profile updated successfully',\n          type: 'success'\n        });\n      }\n    });\n  }\n  registerUser() {\n    const {\n      username,\n      password,\n      email\n    } = this.authForm.value;\n    if (this.userService.userExists(username)) {\n      this.toastService.showToast({\n        message: 'Username already exists',\n        type: 'error'\n      });\n      return;\n    }\n    const newUser = {\n      username,\n      password,\n      email\n    };\n    this.userService.addUser(newUser);\n    this.userService.setCurrentUser(newUser);\n    this.toastService.showToast({\n      message: 'Registration successful',\n      type: 'success'\n    });\n  }\n  loginUser() {\n    const {\n      username,\n      password\n    } = this.authForm.value;\n    const user = this.userService.login(username, password);\n    if (user) {\n      this.userService.setCurrentUser(user);\n      this.toastService.showToast({\n        message: 'Login successful',\n        type: 'success'\n      });\n    } else {\n      this.toastService.showToast({\n        message: 'Invalid username or password',\n        type: 'error'\n      });\n    }\n  }\n  hasErrors(controlName) {\n    const control = this.authForm.get(controlName);\n    return control ? control.invalid && control.touched : false;\n  }\n  closeModal() {\n    this.close.emit();\n  }\n  static #_ = this.ɵfac = function AuthModalComponent_Factory(t) {\n    return new (t || AuthModalComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.UserService), i0.ɵɵdirectiveInject(i3.ToastService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AuthModalComponent,\n    selectors: [[\"app-auth-modal\"]],\n    hostBindings: function AuthModalComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"keydown.escape\", function AuthModalComponent_keydown_escape_HostBindingHandler($event) {\n          return ctx.handleEscape($event);\n        }, false, i0.ɵɵresolveDocument);\n      }\n    },\n    outputs: {\n      close: \"close\"\n    },\n    decls: 23,\n    vars: 13,\n    consts: [[1, \"fixed\", \"inset-0\", \"flex\", \"items-center\", \"justify-center\", \"bg-black\", \"bg-opacity-50\", \"z-50\"], [1, \"relative\", \"bg-white\", \"rounded-lg\", \"shadow-lg\", \"p-6\", \"max-w-md\", \"w-full\"], [1, \"absolute\", \"top-2\", \"right-2\", \"text-gray-500\", \"hover:text-gray-700\", \"text-3xl\", \"leading-none\", \"focus:outline-none\", 3, \"click\"], [1, \"text-2xl\", \"font-semibold\", \"mb-4\", \"align-text-center\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"mb-4\", 3, \"ngClass\"], [\"for\", \"username\", 1, \"block\", \"mb-1\"], [\"id\", \"username\", \"formControlName\", \"username\", \"type\", \"text\", 1, \"w-full\", \"p-2\", \"rounded\", \"border\"], [\"class\", \"text-red-500 text-sm mt-1\", 4, \"ngIf\"], [\"for\", \"password\", 1, \"block\", \"mb-1\"], [\"id\", \"password\", \"formControlName\", \"password\", \"type\", \"password\", 1, \"w-full\", \"p-2\", \"rounded\", \"border\"], [\"class\", \"mb-4\", 3, \"ngClass\", 4, \"ngIf\"], [\"type\", \"submit\", 1, \"w-full\", \"p-2\", \"bg-blue-500\", \"text-white\", \"rounded\", \"hover:bg-blue-600\"], [1, \"mt-4\", \"text-center\"], [1, \"text-blue-500\", \"hover:underline\", 3, \"click\"], [1, \"text-red-500\", \"text-sm\", \"mt-1\"], [4, \"ngIf\"], [\"for\", \"email\", 1, \"block\", \"mb-1\"], [\"id\", \"email\", \"formControlName\", \"email\", \"type\", \"email\", 1, \"w-full\", \"p-2\", \"rounded\", \"border\"]],\n    template: function AuthModalComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"button\", 2);\n        i0.ɵɵlistener(\"click\", function AuthModalComponent_Template_button_click_2_listener() {\n          return ctx.closeModal();\n        });\n        i0.ɵɵtext(3, \" \\u00D7 \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"h2\", 3);\n        i0.ɵɵtext(5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"form\", 4);\n        i0.ɵɵlistener(\"ngSubmit\", function AuthModalComponent_Template_form_ngSubmit_6_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelementStart(7, \"div\", 5)(8, \"label\", 6);\n        i0.ɵɵtext(9, \"Username\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(10, \"input\", 7);\n        i0.ɵɵtemplate(11, AuthModalComponent_div_11_Template, 3, 2, \"div\", 8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"div\", 5)(13, \"label\", 9);\n        i0.ɵɵtext(14, \"Password\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(15, \"input\", 10);\n        i0.ɵɵtemplate(16, AuthModalComponent_div_16_Template, 3, 2, \"div\", 8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(17, AuthModalComponent_div_17_Template, 5, 4, \"div\", 11);\n        i0.ɵɵelementStart(18, \"button\", 12);\n        i0.ɵɵtext(19);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(20, \"div\", 13)(21, \"button\", 14);\n        i0.ɵɵlistener(\"click\", function AuthModalComponent_Template_button_click_21_listener() {\n          return ctx.toggleMode();\n        });\n        i0.ɵɵtext(22);\n        i0.ɵɵelementEnd()()()();\n      }\n      if (rf & 2) {\n        let tmp_3_0;\n        let tmp_5_0;\n        i0.ɵɵadvance(5);\n        i0.ɵɵtextInterpolate1(\" \", ctx.isRegisterMode ? \"Register\" : \"Login\", \" \");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"formGroup\", ctx.authForm);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(9, _c0, ctx.hasErrors(\"username\")));\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngIf\", ((tmp_3_0 = ctx.authForm.get(\"username\")) == null ? null : tmp_3_0.invalid) && ((tmp_3_0 = ctx.authForm.get(\"username\")) == null ? null : tmp_3_0.touched));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(11, _c0, ctx.hasErrors(\"password\")));\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngIf\", ((tmp_5_0 = ctx.authForm.get(\"password\")) == null ? null : tmp_5_0.invalid) && ((tmp_5_0 = ctx.authForm.get(\"password\")) == null ? null : tmp_5_0.touched));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.isRegisterMode);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\" \", ctx.isRegisterMode ? \"Register\" : \"Login\", \" \");\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate1(\" \", ctx.isRegisterMode ? \"Already have an account? Login\" : \"Don't have an account? Register\", \" \");\n      }\n    },\n    dependencies: [i4.NgClass, i4.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName],\n    styles: [\".align-text-center[_ngcontent-%COMP%] {\\n  text-align: center;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF1dGgtbW9kYWwuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxrQkFBQTtBQUNGIiwiZmlsZSI6ImF1dGgtbW9kYWwuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuYWxpZ24tdGV4dC1jZW50ZXIge1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG59XG4iXX0= */\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy9hdXRoLW1vZGFsL2F1dGgtbW9kYWwuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxrQkFBQTtBQUNGO0FBQ0Esb1VBQW9VIiwic291cmNlc0NvbnRlbnQiOlsiLmFsaWduLXRleHQtY2VudGVyIHtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"mappings":"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","names":["EventEmitter","Validators","i0","AuthModalComponent","constructor","fb","userService","toastService","authForm","group","username","required","minLength","password","email","currentUser$","ngOnInit","subscribe","user","initializeFormForUser","isProfileMode","patchValue","reset","handleEscape","event","closeModal","toggleMode","isRegisterMode","updateEmailValidators","resetForm","get","setValidators","clearValidators","updateValueAndValidity","Object","keys","controls","forEach","control","markAsUntouched","onSubmit","invalid","markAllAsTouched","updateProfile","registerUser","loginUser","updatedUser","value","updateUser","id","showToast","message","type","userExists","newUser","addUser","setCurrentUser","login","hasErrors","controlName","touched","close","emit","selectors","hostBindings","ctx"],"sourceRoot":"","sources":["/home/abruptedge/crafton-project4-ceg3121/angular-site/wsu-hw-ng-main/src/app/components/auth-modal/auth-modal.component.ts","/home/abruptedge/crafton-project4-ceg3121/angular-site/wsu-hw-ng-main/src/app/components/auth-modal/auth-modal.component.html"],"sourcesContent":["import {Component, EventEmitter, HostListener, OnInit, Output} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { UserService } from '../../services/user.service';\nimport { ToastService } from '../../services/toast.service';\nimport {User} from \"../../models/user.model\";\nimport {Observable} from \"rxjs\";\n\n@Component({\n  selector: 'app-auth-modal',\n  templateUrl: './auth-modal.component.html',\n  styleUrls: ['./auth-modal.component.scss']\n})\nexport class AuthModalComponent implements OnInit {\n  @Output() close = new EventEmitter<void>();\n\n  authForm: FormGroup;\n  isRegisterMode = false;\n  isProfileMode = false;\n  currentUser$: Observable<User | null>;\n\n  constructor(private fb: FormBuilder, private userService: UserService, private toastService: ToastService) {\n    this.authForm = this.fb.group({\n      username: ['', [Validators.required, Validators.minLength(3)]],\n      password: ['', [Validators.required, Validators.minLength(6)]],\n      email: ['']  // Only required during registration or profile update\n    });\n    // Directly assign the observable\n    this.currentUser$ = this.userService.currentUser$;\n  }\n\n  ngOnInit(): void {\n    this.currentUser$.subscribe(user => this.initializeFormForUser(user));\n  }\n\n  private initializeFormForUser(user: User | null): void {\n    if (user) {\n      this.isProfileMode = true;\n      this.authForm.patchValue(user);\n    } else {\n      this.isProfileMode = false;\n      this.authForm.reset();\n    }\n  }\n\n  @HostListener('document:keydown.escape', ['$event'])\n  handleEscape(event: KeyboardEvent): void {\n    this.closeModal();\n  }\n\n  toggleMode(): void {\n    this.isRegisterMode = !this.isRegisterMode;\n    this.isProfileMode = false;\n\n    this.updateEmailValidators();\n    this.resetForm();\n  }\n\n  private updateEmailValidators(): void {\n    if (this.isRegisterMode) {\n      this.authForm.get('email')?.setValidators([Validators.required, Validators.email]);\n    } else {\n      this.authForm.get('email')?.clearValidators();\n    }\n    this.authForm.get('email')?.updateValueAndValidity();\n  }\n\n  private resetForm(): void {\n    this.authForm.reset();\n    Object.keys(this.authForm.controls).forEach(control => {\n      this.authForm.get(control)?.markAsUntouched();\n    });\n  }\n\n  onSubmit(): void {\n    if (this.authForm.invalid) {\n      this.authForm.markAllAsTouched();\n      return;\n    }\n\n    if (this.isProfileMode) {\n      this.updateProfile();\n    } else if (this.isRegisterMode) {\n      this.registerUser();\n    } else {\n      this.loginUser();\n    }\n\n    this.authForm.reset();\n    this.closeModal();\n  }\n\n  private updateProfile(): void {\n    this.currentUser$.subscribe(user => {\n      if (user) {\n        const updatedUser: User = { ...user, ...this.authForm.value };\n        this.userService.updateUser(updatedUser.id, updatedUser);\n        this.toastService.showToast({ message: 'Profile updated successfully', type: 'success' });\n      }\n    });\n  }\n\n  private registerUser(): void {\n    const { username, password, email } = this.authForm.value;\n    if (this.userService.userExists(username)) {\n      this.toastService.showToast({ message: 'Username already exists', type: 'error' });\n      return;\n    }\n    const newUser = { username, password, email } as User;\n    this.userService.addUser(newUser);\n    this.userService.setCurrentUser(newUser);\n    this.toastService.showToast({ message: 'Registration successful', type: 'success' });\n  }\n\n  private loginUser(): void {\n    const { username, password } = this.authForm.value;\n    const user = this.userService.login(username, password);\n    if (user) {\n      this.userService.setCurrentUser(user);\n      this.toastService.showToast({ message: 'Login successful', type: 'success' });\n    } else {\n      this.toastService.showToast({ message: 'Invalid username or password', type: 'error' });\n    }\n  }\n\n  hasErrors(controlName: string): boolean {\n    const control = this.authForm.get(controlName);\n    return control ? control.invalid && control.touched : false;\n  }\n\n  closeModal(): void {\n    this.close.emit();\n  }\n}\n","<div class=\"fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50\">\n  <div class=\"relative bg-white rounded-lg shadow-lg p-6 max-w-md w-full\">\n    <button (click)=\"closeModal()\" class=\"absolute top-2 right-2 text-gray-500 hover:text-gray-700 text-3xl leading-none focus:outline-none\">\n      &times;\n    </button>\n    <h2 class=\"text-2xl font-semibold mb-4 align-text-center\">\n      {{ isRegisterMode ? 'Register' : 'Login' }}\n    </h2>\n\n    <form [formGroup]=\"authForm\" (ngSubmit)=\"onSubmit()\">\n      <div class=\"mb-4\" [ngClass]=\"{'mb-6': hasErrors('username')}\">\n        <label for=\"username\" class=\"block mb-1\">Username</label>\n        <input id=\"username\" formControlName=\"username\" type=\"text\" class=\"w-full p-2 rounded border\">\n        <div *ngIf=\"authForm.get('username')?.invalid && authForm.get('username')?.touched\" class=\"text-red-500 text-sm mt-1\">\n          <div *ngIf=\"authForm.get('username')?.hasError('required')\">Username is required.</div>\n          <div *ngIf=\"authForm.get('username')?.hasError('minlength')\">Username must be at least 3 characters long.</div>\n        </div>\n      </div>\n\n      <div class=\"mb-4\" [ngClass]=\"{'mb-6': hasErrors('password')}\">\n        <label for=\"password\" class=\"block mb-1\">Password</label>\n        <input id=\"password\" formControlName=\"password\" type=\"password\" class=\"w-full p-2 rounded border\">\n        <div *ngIf=\"authForm.get('password')?.invalid && authForm.get('password')?.touched\" class=\"text-red-500 text-sm mt-1\">\n          <div *ngIf=\"authForm.get('password')?.hasError('required')\">Password is required.</div>\n          <div *ngIf=\"authForm.get('password')?.hasError('minlength')\">Password must be at least 6 characters long.</div>\n        </div>\n      </div>\n\n      <div class=\"mb-4\" *ngIf=\"isRegisterMode\" [ngClass]=\"{'mb-6': hasErrors('email')}\">\n        <label for=\"email\" class=\"block mb-1\">Email</label>\n        <input id=\"email\" formControlName=\"email\" type=\"email\" class=\"w-full p-2 rounded border\">\n        <div *ngIf=\"authForm.get('email')?.invalid && authForm.get('email')?.touched\" class=\"text-red-500 text-sm mt-1\">\n          <div *ngIf=\"authForm.get('email')?.hasError('required')\">Email is required.</div>\n          <div *ngIf=\"authForm.get('email')?.hasError('email')\">Email must be a valid email address.</div>\n        </div>\n      </div>\n\n      <button type=\"submit\" class=\"w-full p-2 bg-blue-500 text-white rounded hover:bg-blue-600\">\n        {{ isRegisterMode ? 'Register' : 'Login' }}\n      </button>\n    </form>\n\n    <div class=\"mt-4 text-center\">\n      <button (click)=\"toggleMode()\" class=\"text-blue-500 hover:underline\">\n        {{ isRegisterMode ? 'Already have an account? Login' : 'Don\\'t have an account? Register' }}\n      </button>\n    </div>\n  </div>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}