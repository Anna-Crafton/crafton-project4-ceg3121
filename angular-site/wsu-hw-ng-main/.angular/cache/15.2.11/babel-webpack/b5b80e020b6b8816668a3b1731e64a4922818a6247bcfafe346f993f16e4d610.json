{"ast":null,"code":"import { BehaviorSubject, map, of } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./toast.service\";\nexport class UserService {\n  constructor(http, toastr) {\n    this.http = http;\n    this.toastr = toastr;\n    this.usersUrl = 'assets/mock-users.json';\n    this.users = [];\n    this.apiUrl = 'https://mockapi.io/users'; // This is a mock URL for demonstration purposes\n    this.currentUserSubject = new BehaviorSubject(null);\n    this.currentUser$ = this.currentUserSubject.asObservable();\n    this.loadUsers();\n  }\n  // Load users from the local JSON file\n  loadUsers() {\n    this.http.get(this.usersUrl).subscribe({\n      next: users => {\n        this.users = users;\n      },\n      error: error => {\n        console.error('Error loading users', error);\n      }\n    });\n  }\n  // HTTP methods for a mocked API\n  getUserViaHttp() {\n    return this.http.get(`${this.apiUrl}`);\n  }\n  getUserByIdViaHttp(id) {\n    return this.http.get(`${this.apiUrl}/${id}`);\n  }\n  addUserViaHttp(user) {\n    return this.http.post(this.apiUrl, user);\n  }\n  updateUserViaHttp(id, user) {\n    return this.http.put(`${this.apiUrl}/${id}`, user);\n  }\n  deleteUserViaHttp(id) {\n    return this.http.delete(`${this.apiUrl}/${id}`);\n  }\n  // Local data methods using hardcoded JSON\n  getUsers() {\n    // Ensure users are loaded before accessing them\n    if (this.users.length > 0) {\n      return of(this.users);\n    } else {\n      return this.http.get(this.usersUrl).pipe(map(users => {\n        this.users = users;\n        return users;\n      }));\n    }\n  }\n  addUser(user) {\n    user.id = this.getNextAvailableId();\n    this.users.push(user);\n  }\n  // Helper method to determine the next available ID\n  getNextAvailableId() {\n    return this.users.length > 0 ? Math.max(...this.users.map(u => u.id)) + 1 : 1;\n  }\n  updateUser(id, updatedUser) {\n    if (updatedUser.password.match(/\\w{5,10}/) && updatedUser.username.match(/\\w{5,10}/)) {\n      const index = this.users.findIndex(user => user.id === id);\n      if (index !== -1) {\n        this.users[index] = updatedUser;\n        this.setCurrentUser(updatedUser);\n      }\n      this.toastr.showToast({\n        message: 'User Updated',\n        type: 'success'\n      });\n    } else {\n      this.toastr.showToast({\n        message: 'Please make your username / password 5-10 alphanumeric characters',\n        type: 'error'\n      });\n    }\n  }\n  setCurrentUser(user) {\n    this.currentUserSubject.next(user);\n  }\n  userExists(username) {\n    return this.users.some(user => user.username === username);\n  }\n  login(username, password) {\n    return this.users.find(user => user.username === username && user.password === password) || null;\n  }\n  logout() {\n    this.setCurrentUser(null);\n  }\n  static #_ = this.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ToastService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"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","names":["BehaviorSubject","map","of","UserService","constructor","http","toastr","currentUserSubject","asObservable","loadUsers","get","usersUrl","subscribe","next","users","error","console","getUserViaHttp","apiUrl","getUserByIdViaHttp","id","addUserViaHttp","user","post","updateUserViaHttp","put","deleteUserViaHttp","delete","getUsers","length","pipe","addUser","getNextAvailableId","push","Math","max","u","updateUser","updatedUser","password","match","username","index","findIndex","setCurrentUser","showToast","message","type","userExists","some","login","find","logout","factory","providedIn"],"sourceRoot":"","sources":["/home/abruptedge/crafton-project4-ceg3121/angular-site/wsu-hw-ng-main/src/app/services/user.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { User } from '../models/user.model';\nimport {BehaviorSubject, map, Observable, of} from \"rxjs\";\nimport {HttpClient} from \"@angular/common/http\";\nimport {ToastService} from \"./toast.service\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n  private usersUrl = 'assets/mock-users.json';\n  private users: User[] = [];\n  private apiUrl = 'https://mockapi.io/users'; // This is a mock URL for demonstration purposes\n\n  private currentUserSubject = new BehaviorSubject<User | null>(null);\n  currentUser$ = this.currentUserSubject.asObservable();\n\n  constructor(private http: HttpClient, private toastr: ToastService) {\n    this.loadUsers();\n  }\n\n  // Load users from the local JSON file\n  private loadUsers(): void {\n    this.http.get<User[]>(this.usersUrl).subscribe({\n      next: users => {\n        this.users = users;\n      }, error: error => {\n        console.error('Error loading users', error);\n    }})\n  }\n\n  // HTTP methods for a mocked API\n  getUserViaHttp(): Observable<User[]> {\n    return this.http.get<User[]>(`${this.apiUrl}`);\n  }\n\n  getUserByIdViaHttp(id: number): Observable<User> {\n    return this.http.get<User>(`${this.apiUrl}/${id}`);\n  }\n\n  addUserViaHttp(user: User): Observable<User> {\n    return this.http.post<User>(this.apiUrl, user);\n  }\n\n  updateUserViaHttp(id: number, user: User): Observable<User> {\n    return this.http.put<User>(`${this.apiUrl}/${id}`, user);\n  }\n\n  deleteUserViaHttp(id: number): Observable<void> {\n    return this.http.delete<void>(`${this.apiUrl}/${id}`);\n  }\n\n  // Local data methods using hardcoded JSON\n  getUsers(): Observable<User[]> {\n    // Ensure users are loaded before accessing them\n    if (this.users.length > 0) {\n      return of(this.users);\n    } else {\n      return this.http.get<User[]>(this.usersUrl).pipe(\n        map(users => {\n          this.users = users;\n          return users;\n        })\n      );\n    }\n  }\n\n  addUser(user: User): void {\n    user.id = this.getNextAvailableId();\n    this.users.push(user);\n  }\n\n  // Helper method to determine the next available ID\n  private getNextAvailableId(): number {\n    return this.users.length > 0 ? Math.max(...this.users.map(u => u.id)) + 1 : 1;\n  }\n\n  updateUser(id: number, updatedUser: User): void {\n    if (updatedUser.password.match(/\\w{5,10}/) && updatedUser.username.match(/\\w{5,10}/)){\n      const index = this.users.findIndex(user => user.id === id);\n      if (index !== -1) {\n        this.users[index] = updatedUser;\n        this.setCurrentUser(updatedUser);\n      }\n      this.toastr.showToast({\n        message: 'User Updated',\n        type: 'success'\n      });\n    } else {\n      this.toastr.showToast({\n        message: 'Please make your username / password 5-10 alphanumeric characters',\n        type: 'error'\n      });\n    }\n  }\n\n  setCurrentUser(user: User | null): void {\n    this.currentUserSubject.next(user);\n  }\n\n  userExists(username: string): boolean {\n    return this.users.some(user => user.username === username);\n  }\n\n  login(username: string, password: string): User | null {\n    return this.users.find(user => user.username === username && user.password === password) || null;\n  }\n\n  logout(): void {\n    this.setCurrentUser(null);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}