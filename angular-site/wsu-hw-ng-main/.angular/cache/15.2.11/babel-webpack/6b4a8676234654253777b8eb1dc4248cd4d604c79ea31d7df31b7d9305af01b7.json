{"ast":null,"code":"import { User1 } from './shared.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class GlobalService {\n  constructor(http) {\n    this.http = http;\n    // TODO: store objects / variables to persist between components\n    this.user = []; // have an array of potential valid users?\n    // showcase utilizing a constructor for class vs interface\n    this.adminUser = new User1('John Doe', 'jdoe@yahoo.net', '123-456-7890', 'Add more articles to the site!');\n    this.emailRegex = /(\\w+@\\w+\\.\\w{3,})*$/; // pattern to match multiple word characters followed by an @ symbol, multiple word characters, followed by a . followed by 3 or more word characters\n    this.phoneRegex = /(\\(\\d\\)\\-)?\\d{3}\\-\\d{3}\\-\\d{4}/g; // pattern to match an optional digit enclosed in parantheses followed by 3 numbers, a dash, 3 numbers, a dash and 4 numbers\n  }\n  // TODO: fill in and correct our http call functions\n  doPost(url, reqBody, headers) {\n    const options = {\n      headers: headers\n    };\n    return this.http.post(url, reqBody, options).pipe(res => {\n      return res;\n    });\n  }\n  doPut(url, reqBody, headers) {\n    const options = {\n      headers: headers\n    };\n    return this.http.put(url, reqBody, options).pipe(res => {\n      return res;\n    });\n  }\n  doGet(url, headers) {\n    const options = {\n      headers: headers\n    };\n    return this.http.get(url, options).pipe(res => {\n      return res;\n    });\n  }\n  static #_ = this.ɵfac = function GlobalService_Factory(t) {\n    return new (t || GlobalService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: GlobalService,\n    factory: GlobalService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AAIA,SAAeA,KAAK,QAAQ,gBAAgB;;;AAK5C,OAAM,MAAOC,aAAa;EAExBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAGxB;IACA,SAAI,GAAW,EAAE,CAAC,CAAC;IACnB;IACA,cAAS,GAAU,IAAIH,KAAK,CAAC,UAAU,EAAE,gBAAgB,EAAE,cAAc,EAAE,gCAAgC,CAAC;IAE5G,eAAU,GAAW,qBAAqB,CAAC,CAAC;IAC5C,eAAU,GAAW,iCAAiC,CAAC,CAAC;EARxD;EAUA;EACAI,MAAM,CAACC,GAAQ,EAAEC,OAAe,EAAEC,OAAqB;IACrD,MAAMC,OAAO,GAAG;MACdD,OAAO,EAAEA;KACV;IACD,OAAO,IAAI,CAACJ,IAAI,CAACM,IAAI,CAACJ,GAAG,EAAEC,OAAO,EAAEE,OAAO,CAAC,CAACE,IAAI,CAACC,GAAG,IAAG;MACtD,OAAOA,GAAG;IACZ,CAAC,CAAC;EACJ;EAEAC,KAAK,CAACP,GAAQ,EAAEC,OAAe,EAAEC,OAAqB;IACpD,MAAMC,OAAO,GAAG;MACdD,OAAO,EAAEA;KACV;IACD,OAAO,IAAI,CAACJ,IAAI,CAACU,GAAG,CAACR,GAAG,EAAEC,OAAO,EAAEE,OAAO,CAAC,CAACE,IAAI,CAACC,GAAG,IAAG;MACrD,OAAOA,GAAG;IACZ,CAAC,CAAC;EACJ;EAEAG,KAAK,CAACT,GAAQ,EAAEE,OAAqB;IACnC,MAAMC,OAAO,GAAG;MACdD,OAAO,EAAEA;KACV;IACD,OAAO,IAAI,CAACJ,IAAI,CAACY,GAAG,CAACV,GAAG,EAAEG,OAAO,CAAC,CAACE,IAAI,CAACC,GAAG,IAAG;MAC5C,OAAOA,GAAG;IACZ,CAAC,CAAC;EACJ;EAAC;qBAvCUV,aAAa;EAAA;EAAA;WAAbA,aAAa;IAAAe,SAAbf,aAAa;IAAAgB,YAFZ;EAAM","names":["User1","GlobalService","constructor","http","doPost","url","reqBody","headers","options","post","pipe","res","doPut","put","doGet","get","factory","providedIn"],"sourceRoot":"","sources":["/home/abruptedge/crafton-project4-ceg3121/angular-site/wsu-hw-ng-main/src/app/shared/global.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\nimport { User, User1 } from './shared.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GlobalService { // Utilize shared service functionality here\n\n  constructor(private http: HttpClient) {\n  }\n\n  // TODO: store objects / variables to persist between components\n  user: User[] = []; // have an array of potential valid users?\n  // showcase utilizing a constructor for class vs interface\n  adminUser: User1 = new User1('John Doe', 'jdoe@yahoo.net', '123-456-7890', 'Add more articles to the site!');\n\n  emailRegex: RegExp = /(\\w+@\\w+\\.\\w{3,})*$/; // pattern to match multiple word characters followed by an @ symbol, multiple word characters, followed by a . followed by 3 or more word characters\n  phoneRegex: RegExp = /(\\(\\d\\)\\-)?\\d{3}\\-\\d{3}\\-\\d{4}/g; // pattern to match an optional digit enclosed in parantheses followed by 3 numbers, a dash, 3 numbers, a dash and 4 numbers\n\n  // TODO: fill in and correct our http call functions\n  doPost(url: any, reqBody: string, headers?: HttpHeaders): Observable<any> { // execute a POST call\n    const options = {\n      headers: headers\n    }\n    return this.http.post(url, reqBody, options).pipe(res => { // allow individual components to subscribe to the results produced by this call\n      return res;\n    })\n  }\n\n  doPut(url: any, reqBody: string, headers?: HttpHeaders): Observable<any> { // execute a PUT call\n    const options = {\n      headers: headers\n    }\n    return this.http.put(url, reqBody, options).pipe(res => { // allow individual components to subscribe to the results produced by this call\n      return res;\n    })\n  }\n\n  doGet(url: any, headers?: HttpHeaders): Observable<any> { // execute a GET call\n    const options = {\n      headers: headers\n    }\n    return this.http.get(url, options).pipe(res => { // allow individual components to subscribe to the results produced by this call\n      return res;\n    })\n  }\n\n  // TODO: write at least one utility function and use it in multiple components\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}