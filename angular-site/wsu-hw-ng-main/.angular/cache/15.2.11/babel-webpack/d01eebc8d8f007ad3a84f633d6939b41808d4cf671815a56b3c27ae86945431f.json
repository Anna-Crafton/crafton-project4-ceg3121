{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./global.service\";\nexport class PhoneHighlighterDirective {\n  constructor(displayPhone, globalService) {\n    this.displayPhone = displayPhone;\n    this.globalService = globalService;\n  }\n  onKeyDown(event) {\n    const value = this.displayPhone.nativeElement.value + event.key;\n    if (!value.match(this.globalService.phoneRegex)) {\n      // if we do not match proper email regex, highlight!\n      this.displayPhone.nativeElement.setAttribute('style', 'color: rgb(239 68 68);');\n    } else {\n      this.displayPhone.nativeElement.removeAttribute('style', 'color: rgb(239 68 68);');\n    }\n  }\n  static #_ = this.ɵfac = function PhoneHighlighterDirective_Factory(t) {\n    return new (t || PhoneHighlighterDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.GlobalService));\n  };\n  static #_2 = this.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: PhoneHighlighterDirective,\n    selectors: [[\"\", \"appPhoneSyntaxHighlighter\", \"\"]],\n    hostBindings: function PhoneHighlighterDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"keydown\", function PhoneHighlighterDirective_keydown_HostBindingHandler($event) {\n          return ctx.onKeyDown($event);\n        });\n      }\n    }\n  });\n}\nexport class EmailHighlighterDirective {\n  constructor(displayEmail, globalService) {\n    this.displayEmail = displayEmail;\n    this.globalService = globalService;\n  }\n  onKeyDown(event) {\n    const value = this.displayEmail.nativeElement.value + event.key;\n    if (!value.match(this.globalService.emailRegex)) {\n      // if we do not match proper email regex, highlight!\n      this.displayEmail.nativeElement.setAttribute('style', 'color: rgb(239 68 68);');\n    } else {\n      this.displayEmail.nativeElement.removeAttribute('style', 'color: rgb(239 68 68);');\n    }\n  }\n  static #_ = this.ɵfac = function EmailHighlighterDirective_Factory(t) {\n    return new (t || EmailHighlighterDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.GlobalService));\n  };\n  static #_2 = this.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: EmailHighlighterDirective,\n    selectors: [[\"\", \"appEmailSyntaxHighlighter\", \"\"]],\n    hostBindings: function EmailHighlighterDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"keydown\", function EmailHighlighterDirective_keydown_HostBindingHandler($event) {\n          return ctx.onKeyDown($event);\n        });\n      }\n    }\n  });\n}\nexport class ClickOutsideDirective {\n  constructor(elementRef) {\n    this.elementRef = elementRef;\n    this.clickOutside = new EventEmitter();\n  }\n  onClick(target) {\n    const clickedInside = this.elementRef.nativeElement.contains(target);\n    if (!clickedInside) {\n      this.clickOutside.emit();\n    }\n  }\n  static #_ = this.ɵfac = function ClickOutsideDirective_Factory(t) {\n    return new (t || ClickOutsideDirective)(i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n  static #_2 = this.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: ClickOutsideDirective,\n    selectors: [[\"\", \"appClickOutside\", \"\"]],\n    hostBindings: function ClickOutsideDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"click\", function ClickOutsideDirective_click_HostBindingHandler($event) {\n          return ctx.onClick($event.target);\n        }, false, i0.ɵɵresolveDocument);\n      }\n    },\n    outputs: {\n      clickOutside: \"clickOutside\"\n    }\n  });\n}","map":{"version":3,"mappings":"AAAA,SAAgCA,YAAY,QAAmD,eAAe;;;AAO9G,OAAM,MAAOC,yBAAyB;EAEpCC,YAAoBC,YAAwB,EAAUC,aAA4B;IAA9D,iBAAY,GAAZD,YAAY;IAAsB,kBAAa,GAAbC,aAAa;EAAkB;EAGrFC,SAAS,CAACC,KAAoB;IAC5B,MAAMC,KAAK,GAAW,IAAI,CAACJ,YAAY,CAACK,aAAa,CAACD,KAAK,GAAGD,KAAK,CAACG,GAAG;IACvE,IAAI,CAACF,KAAK,CAACG,KAAK,CAAC,IAAI,CAACN,aAAa,CAACO,UAAU,CAAC,EAAE;MAAE;MACjD,IAAI,CAACR,YAAY,CAACK,aAAa,CAACI,YAAY,CAAC,OAAO,EAAE,wBAAwB,CAAC;KAChF,MAAM;MACL,IAAI,CAACT,YAAY,CAACK,aAAa,CAACK,eAAe,CAAC,OAAO,EAAE,wBAAwB,CAAC;;EAEtF;EAAC;qBAZUZ,yBAAyB;EAAA;EAAA;UAAzBA,yBAAyB;IAAAa;IAAAC;MAAA;;iBAAzBC,qBAAiB;QAAA;;;;;AAoB9B,OAAM,MAAOC,yBAAyB;EAEpCf,YAAoBgB,YAAwB,EAAUd,aAA4B;IAA9D,iBAAY,GAAZc,YAAY;IAAsB,kBAAa,GAAbd,aAAa;EAAkB;EAGrFC,SAAS,CAACC,KAAoB;IAC5B,MAAMC,KAAK,GAAW,IAAI,CAACW,YAAY,CAACV,aAAa,CAACD,KAAK,GAAGD,KAAK,CAACG,GAAG;IACvE,IAAI,CAACF,KAAK,CAACG,KAAK,CAAC,IAAI,CAACN,aAAa,CAACe,UAAU,CAAC,EAAE;MAAE;MACjD,IAAI,CAACD,YAAY,CAACV,aAAa,CAACI,YAAY,CAAC,OAAO,EAAE,wBAAwB,CAAC;KAChF,MAAM;MACL,IAAI,CAACM,YAAY,CAACV,aAAa,CAACK,eAAe,CAAC,OAAO,EAAE,wBAAwB,CAAC;;EAEtF;EAAC;qBAZUI,yBAAyB;EAAA;EAAA;UAAzBA,yBAAyB;IAAAH;IAAAC;MAAA;;iBAAzBC,qBAAiB;QAAA;;;;;AAoB9B,OAAM,MAAOI,qBAAqB;EAGhClB,YAAoBmB,UAAsB;IAAtB,eAAU,GAAVA,UAAU;IAFpB,iBAAY,GAAG,IAAIrB,YAAY,EAAQ;EAEJ;EAGtCsB,OAAO,CAACC,MAAW;IACxB,MAAMC,aAAa,GAAG,IAAI,CAACH,UAAU,CAACb,aAAa,CAACiB,QAAQ,CAACF,MAAM,CAAC;IACpE,IAAI,CAACC,aAAa,EAAE;MAClB,IAAI,CAACE,YAAY,CAACC,IAAI,EAAE;;EAE5B;EAAC;qBAXUP,qBAAqB;EAAA;EAAA;UAArBA,qBAAqB;IAAAN;IAAAC;MAAA;;iBAArBC,0BAAsB;QAAA","names":["EventEmitter","PhoneHighlighterDirective","constructor","displayPhone","globalService","onKeyDown","event","value","nativeElement","key","match","phoneRegex","setAttribute","removeAttribute","selectors","hostBindings","ctx","EmailHighlighterDirective","displayEmail","emailRegex","ClickOutsideDirective","elementRef","onClick","target","clickedInside","contains","clickOutside","emit"],"sourceRoot":"","sources":["/home/abruptedge/crafton-project4-ceg3121/angular-site/wsu-hw-ng-main/src/app/shared/shared-directives.ts"],"sourcesContent":["import { Directive, ElementRef, EventEmitter, Host, HostListener, Output, SimpleChanges } from '@angular/core';\n\nimport { GlobalService } from './global.service';\n\n@Directive({\n  selector: '[appPhoneSyntaxHighlighter]'\n})\nexport class PhoneHighlighterDirective {\n\n  constructor(private displayPhone: ElementRef, private globalService: GlobalService) {}\n\n  @HostListener('keydown', ['$event']) // listen to keydown strokes in this input\n  onKeyDown(event: KeyboardEvent) {\n    const value: string = this.displayPhone.nativeElement.value + event.key;\n    if (!value.match(this.globalService.phoneRegex)) { // if we do not match proper email regex, highlight!\n      this.displayPhone.nativeElement.setAttribute('style', 'color: rgb(239 68 68);');\n    } else {\n      this.displayPhone.nativeElement.removeAttribute('style', 'color: rgb(239 68 68);');\n    }\n  }\n\n}\n\n\n@Directive({\n  selector: '[appEmailSyntaxHighlighter]'\n})\nexport class EmailHighlighterDirective { // highlight incorrectly formatted emails\n\n  constructor(private displayEmail: ElementRef, private globalService: GlobalService) {}\n\n  @HostListener('keydown', ['$event']) // listen to keydown strokes in this input\n  onKeyDown(event: KeyboardEvent) {\n    const value: string = this.displayEmail.nativeElement.value + event.key;\n    if (!value.match(this.globalService.emailRegex)) { // if we do not match proper email regex, highlight!\n      this.displayEmail.nativeElement.setAttribute('style', 'color: rgb(239 68 68);');\n    } else {\n      this.displayEmail.nativeElement.removeAttribute('style', 'color: rgb(239 68 68);');\n    }\n  }\n\n\n}\n\n@Directive({\n  selector: '[appClickOutside]',\n})\nexport class ClickOutsideDirective {\n  @Output() clickOutside = new EventEmitter<void>();\n\n  constructor(private elementRef: ElementRef) {}\n\n  @HostListener('document:click', ['$event.target'])\n  public onClick(target: any) {\n    const clickedInside = this.elementRef.nativeElement.contains(target);\n    if (!clickedInside) {\n      this.clickOutside.emit();\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}