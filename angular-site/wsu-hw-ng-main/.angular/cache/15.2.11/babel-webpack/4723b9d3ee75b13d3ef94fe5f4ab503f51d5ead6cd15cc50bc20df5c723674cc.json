{"ast":null,"code":"export class User1 {\n  constructor(name, email, phone, suggestions) {\n    this.name = name;\n    this.email = email;\n    this.phone = phone;\n    suggestions ? this.suggestions = suggestions : ''; // encourage use of ternary operators etc, I know this one isn't terribly necessary\n  }\n}","map":{"version":3,"mappings":"AAQA,OAAM,MAAOA,KAAK;EAMhBC,YAAYC,IAAY,EAAEC,KAAa,EAAEC,KAAa,EAAEC,WAAoB;IAC1E,IAAI,CAACH,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACC,KAAK,GAAGA,KAAK;IACjBC,WAAW,GAAI,IAAI,CAACA,WAAW,GAAGA,WAAW,GAAG,EAAE,CAAC,CAAC;EACvD","names":["User1","constructor","name","email","phone","suggestions"],"sourceRoot":"","sources":["/home/abruptedge/crafton-project4-ceg3121/angular-site/wsu-hw-ng-main/src/app/shared/shared.model.ts"],"sourcesContent":["// have a shared resource file that displays an understanding and knowledge of re-using data structures (modularity)\nexport interface User { // OPTION ONE, USE AN INTERFACE (do not utilize a constructor)\n  name: string,\n  email: string,\n  phone: string,\n  suggestions?: string\n}\n\nexport class User1 { // OPTION TWO, USE A CLASS (utilize a constructor or methods relating to the class, prove you understand class vs interface)\n  name: string;\n  email: string;\n  phone: string;\n  suggestions?: string;\n\n  constructor(name: string, email: string, phone: string, suggestions?: string) {\n    this.name = name;\n    this.email = email;\n    this.phone = phone;\n    (suggestions) ? this.suggestions = suggestions : ''; // encourage use of ternary operators etc, I know this one isn't terribly necessary\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}